name: Build and Deploy Staging in Server atlas

on:
  push:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      START_TIME: ${{ steps.creat_env.outputs.START_TIME }}
      LAST_COMMIT_HASH: ${{ steps.creat_env.outputs.LAST_COMMIT_HASH }}

      LAPIG_AUTHOR_NAME: ${{ steps.creat_env.outputs.LAPIG_AUTHOR_NAME }}
      LAPIG_AUTHOR_EMAIL: ${{ steps.creat_env.outputs.LAPIG_AUTHOR_EMAIL }}
      LAPIG_AUTHOR_DATE: ${{ steps.creat_env.outputs.LAPIG_AUTHOR_DATE }}
      LAPIG_PROJECT_NAME: ${{ steps.creat_env.outputs.LAPIG_PROJECT_NAME }}
      LAPIG_COMMIT_DATE: ${{ steps.creat_env.outputs.LAPIG_COMMIT_DATE }}

      CREATE_STATUS: ${{steps.deploy_container.outputs.CREATE_STATUS}}"
      DELETE_STATUS: ${{steps.deploy_container.outputs.DELETE_STATUS}}"
      START_STATUS: ${{steps.start_container.outputs.START_STATUS}}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Define a variável application_name
        id: creat_env
        run: |
          echo "START_TIME=$(date -u +%s)" >> "$GITHUB_OUTPUT"
          
          repo_full_name=$GITHUB_REPOSITORY
          repo_name=${repo_full_name##*/}
          echo "Nome do repositório: $repo_name"

          echo "application_name=app_atlas" >> $GITHUB_ENV

          echo "LAST_COMMIT_HASH=$(git log --pretty=format:%h -n 1)" >> $GITHUB_ENV
          
          echo "LAST_COMMIT_HASH=$(git log --pretty=format:%h -n 1)" >> "$GITHUB_OUTPUT"
          
          echo "LAPIG_AUTHOR_NAME=$(git show -s --pretty=%an)" >> "$GITHUB_OUTPUT"
          echo "LAPIG_AUTHOR_EMAIL=$(git show -s --pretty=%ae)" >> "$GITHUB_OUTPUT"
          echo "LAPIG_AUTHOR_DATE=$(git log -1 --format=%cd --date=local)" >> "$GITHUB_OUTPUT"
          echo "LAPIG_PROJECT_NAME=$(git config --local remote.origin.url)" >> "$GITHUB_OUTPUT"
          echo "LAPIG_COMMIT_DATE=$(git show -s --format=%ci)" >> "$GITHUB_OUTPUT"

      - name: Create version.json
        run: echo "{\"commitId\":\"$LAST_COMMIT_HASH\"}" > version.json

      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.4.2'

      - name: Build Server and client
        run: |
          npm set progress=false
          cd ${{ github.workspace }}/src/server && npm install
          cd ${{ github.workspace }}/src/client && npm install
          npm install -g @angular/cli@12.2.16
          cd ${{ github.workspace }}/src/client && ng build -c homolog --stats-json --source-map=false --no-progress


      - name: Build Docker
        run: |
          docker build -t ${{secrets.REGISTRYHOMOL}}/$application_name:${LAST_COMMIT_HASH} -t ${{secrets.REGISTRYHOMOL}}/$application_name:latest  -f docker/homol/Dockerfile . --no-cache


      - name: Login to Docker Registry
        run: echo "${{ secrets.HARBOR_PASS }}" | docker login -u "${{ secrets.HARBOR_USER }}" --password-stdin "${{ secrets.URL_PRIVATE_REGISTRY }}"

      - name: Push Image to Registry
        run: |
          docker push ${{secrets.REGISTRYHOMOL}}/$application_name:${LAST_COMMIT_HASH}
          docker push ${{secrets.REGISTRYHOMOL}}/$application_name:latest

      - name: Remove image locally
        run: |
          docker rmi ${{secrets.REGISTRYHOMOL}}/$application_name:${LAST_COMMIT_HASH}
          docker rmi ${{secrets.REGISTRYHOMOL}}/$application_name:latest


      - name: Add SSH key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa ${{secrets.SERVER_HOMOL_KNOWN}} >> ~/.ssh/known_hosts  2>/dev/null 
          chmod 644 ~/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa 
          chmod 600 ~/.ssh/id_rsa

      - name: Pull Image on Server
        run: |
          ssh ${{secrets.SERVER_HOMOL_SSH}} "docker pull ${{secrets.REGISTRYHOMOL}}/$application_name:latest"

      - name: Deploy Container
        id: deploy_container
        run: |
          delete_status=$(ssh ${{secrets.SERVER_HOMOL_SSH}} "curl -v -X DELETE -w "%{http_code}"  http://${{secrets.SERVER_HOMOL}}/containers/$application_name?force=true  2>/dev/null")  
          create_status=$(ssh ${{secrets.SERVER_HOMOL_SSH}} "curl -v -X POST -H 'Content-Type: application/json' -d @${{secrets.CONFIG_FILES}}$application_name.json -s -o /dev/null -w "%{http_code}"  http://${{secrets.SERVER_HOMOL}}/containers/create?name=$application_name  2>/dev/null")  
          
          echo "CREATE_STATUS=$create_status" >> "$GITHUB_OUTPUT"
          echo "DELETE_STATUS=$delete_status" >> "$GITHUB_OUTPUT"
      - name: Start Container
        id: start_container
        run: |
          start_status=$(ssh ${{secrets.SERVER_HOMOL_SSH}} "curl -v -X POST -s -o /dev/null -w "%{http_code}"   http://${{secrets.SERVER_HOMOL}}/containers/$application_name/start  2>/dev/null") 
          echo "START_STATUS=$start_status" >> "$GITHUB_OUTPUT"
  

  post-deploy:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: ${{ always() || needs.build-and-deploy.result == 'failure' }}
    steps:
      - name: Load env
        run: |
          echo "LAST_COMMIT_HASH=${{needs.build-and-deploy.outputs.LAST_COMMIT_HASH}}" >> $GITHUB_ENV
          echo "LAPIG_AUTHOR_NAME=${{needs.build-and-deploy.outputs.LAPIG_AUTHOR_NAME}}" >> $GITHUB_ENV
          echo "LAPIG_AUTHOR_EMAIL=${{needs.build-and-deploy.outputs.LAPIG_AUTHOR_EMAIL}}" >> $GITHUB_ENV
          echo "LAPIG_AUTHOR_DATE=${{needs.build-and-deploy.outputs.LAPIG_AUTHOR_DATE}}" >> $GITHUB_ENV
          echo "LAPIG_PROJECT_NAME=${{needs.build-and-deploy.outputs.LAPIG_PROJECT_NAME}}" >> $GITHUB_ENV
          echo "LAPIG_COMMIT_COMMENT=${{needs.build-and-deploy.outputs.LAPIG_COMMIT_COMMENT}}" >> $GITHUB_ENV
          echo "LAPIG_COMMIT_DATE=${{needs.build-and-deploy.outputs.LAPIG_COMMIT_DATE}}" >> $GITHUB_ENV
          echo "LAPIG_BRANCH_NAME=${{needs.build-and-deploy.outputs.LAPIG_BRANCH_NAME}}" >> $GITHUB_ENV
          echo "CREATE_STATUS=${{needs.build-and-deploy.outputs.CREATE_STATUS}}" >> $GITHUB_ENV
          echo "DELETE_STATUS=${{needs.build-and-deploy.outputs.DELETE_STATUS}}" >> $GITHUB_ENV
          echo "START_STATUS=${{needs.build-and-deploy.outputs.START_STATUS}}" >> $GITHUB_ENV
      - name: Send message to Telegram
        run: |
          end_time=$(date -u +%s)
          echo "LAPIG_DURATION=$((end_time - $START_TIME))" >> $GITHUB_ENV
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_KEY }}/sendMessage" -d "chat_id=${{ secrets.CHAT_ID }}" -d "parse_mode=markdown" -d "text=*Project*: *${LAPIG_PROJECT_NAME}*\
          *Status:*${{ needs.build-and-deploy.result }}\
          *Branch*: ${LAPIG_BRANCH_NAME}\\n\
          *Author*: *${LAPIG_AUTHOR_NAME}*\\n\
          *Author_Email*: *${LAPIG_AUTHOR_EMAIL}*\\n\
          *Commit_ID*: *${LAST_COMMIT_HASH}*\\n\
          *Message_Commit*: *${LAPIG_COMMIT_COMMENT}*\\n\
          *Date_Commit*: *${LAPIG_COMMIT_DATE}*\\n\
          *Duration*: *${LAPIG_DURATION}*"

      - name: creat message to Discord
        run: |
          if [[ "${{ needs.build-and-deploy.result }}" == "success" && "$START_STATUS" == "204" && "$DELETE_STATUS" == "204" && "$CREATE_STATUS" == "201"  ]]; then
            echo "avatar_url=${{vars.LAPIG_SUCCESS}}" >> $GITHUB_ENV
          else
            echo "avatar_url=${{vars.LAPIG_ERROR}}" >> $GITHUB_ENV
          fi
          echo "discordDesc=Result: ${{ needs.build-and-deploy.result }}\n Project: $LAPIG_PROJECT_NAME\n Commit: $LAST_COMMIT_HASH\n Author: $LAPIG_AUTHOR_NAME\n Author_Email: $LAPIG_AUTHOR_EMAIL\n Message: $LAPIG_COMMIT_COMMENT\n Date: $LAPIG_COMMIT_DATE\n Delete Status: $DELETE_STATUS\n Create Status: $CREATE_STATUS\n Start Status: $START_STATUS\n Duration: $LAPIG_DURATION seconds" >> $GITHUB_ENV

          echo "discordFooter=${{ github.workflow }} (#${{ github.run_number }})" >> $GITHUB_ENV
          echo "discordTitle=${{ github.workflow }} (build #${{ github.run_number }})" >> $GITHUB_ENV

      - name: Send menssage to Discord
        run: |
          echo "{\"content\": \"$discordTitle\", \"embeds\": [ { \"title\": \"$discordTitle\", \"description\": \"$discordDesc\", \"footer\": { \"text\": \"$discordFooter\" } } ], \"username\": \"GitHub Actions\", \"avatar_url\": \"$avatar_url\" }"
          curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$discordTitle\", \"embeds\": [ { \"title\": \"$discordTitle\", \"description\": \"$discordDesc\", \"footer\": { \"text\": \"$discordFooter\" } } ], \"username\": \"GitHub Actions\", \"avatar_url\": \"$avatar_url\" }" https://discord.com/api/webhooks/${{ secrets.DISCORD_KEY }}
            
